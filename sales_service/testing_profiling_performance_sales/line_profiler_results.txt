Timer unit: 1e-07 s

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: display_available_goods at line 107

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   107                                           @app.route('/sales/goods', methods=['GET'])
   108                                           @jwt_required(optional=True)
   109                                           @profile_line
   110                                           @profile
   111                                           def display_available_goods():
   112                                               """
   113                                               Displays all goods with stock information.
   114                                           
   115                                               Returns:
   116                                                   Response: JSON response with available goods. Admins see stock and price details.
   117                                               """
   118                                               claims = get_jwt()
   119                                               is_admin = claims.get('is_admin', False) if claims else False
   120                                               goods = Good.query.join(Inventory).filter(Inventory.stock_count > 0).all()
   121                                               return jsonify([
   122                                                   {"name": g.name, "price": g.price_per_item} if is_admin else {"name": g.name}
   123                                                   for g in goods
   124                                               ]), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: get_good_details at line 127

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   127                                           @app.route('/sales/goods/<int:good_id>', methods=['GET'])
   128                                           @jwt_required(optional=True)
   129                                           @profile_line
   130                                           @profile
   131                                           def get_good_details(good_id):
   132                                               """
   133                                               Retrieves detailed information about a specific good.
   134                                           
   135                                               Args:
   136                                                   good_id (int): ID of the good to retrieve.
   137                                           
   138                                               Returns:
   139                                                   Response: JSON response with good details. Admins see full details, while users see limited details.
   140                                               """
   141                                               claims = get_jwt()
   142                                               is_admin = claims.get('is_admin', False) if claims else False
   143                                           
   144                                               good = Good.query.get(good_id)
   145                                               if not good:
   146                                                   return jsonify({"error": "Good not found"}), 404
   147                                           
   148                                               response_data = {
   149                                                   "name": good.name,
   150                                                   "price_per_item": good.price_per_item
   151                                               }
   152                                               if is_admin:
   153                                                   response_data.update({
   154                                                       "category": good.category,
   155                                                       "description": good.description,
   156                                                       "stock_count": good.inventory.stock_count if good.inventory else 0
   157                                                   })
   158                                           
   159                                               return jsonify(response_data), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: make_sale at line 162

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   162                                           @app.route('/sales', methods=['POST'])
   163                                           @jwt_required()
   164                                           @profile_line
   165                                           @profile
   166                                           def make_sale():
   167                                               """
   168                                               Processes a sale for a customer.
   169                                           
   170                                               Args:
   171                                                   None (data is provided in the request body).
   172                                           
   173                                               Returns:
   174                                                   Response: JSON response with sale confirmation, updated wallet balance, and remaining stock.
   175                                               """
   176                                               current_user_id = get_jwt_identity()
   177                                           
   178                                               try:
   179                                                   data = sale_schema.load(request.get_json())
   180                                               except ValidationError as err:
   181                                                   return jsonify(err.messages), 400
   182                                           
   183                                               data = sanitize_input(data)
   184                                           
   185                                               customer = Customer.query.get(current_user_id)
   186                                               good = Good.query.filter_by(name=data['good_name']).first()
   187                                           
   188                                               if not customer:
   189                                                   return jsonify({"error": "Customer not found"}), 404
   190                                               if not good or not good.inventory or good.inventory.stock_count < data['quantity']:
   191                                                   return jsonify({"error": "Good not available or insufficient stock"}), 400
   192                                           
   193                                               total_price = data['quantity'] * good.price_per_item
   194                                               if customer.wallet_balance < total_price:
   195                                                   return jsonify({"error": "Insufficient funds"}), 400
   196                                           
   197                                               customer.wallet_balance -= total_price
   198                                               good.inventory.stock_count -= data['quantity']
   199                                           
   200                                               sale = Sale(
   201                                                   customer_id=customer.id,
   202                                                   good_id=good.id,
   203                                                   quantity=data['quantity'],
   204                                                   total_price=total_price
   205                                               )
   206                                               db.session.add(sale)
   207                                               db.session.commit()
   208                                           
   209                                               return jsonify({
   210                                                   "message": "Sale successful",
   211                                                   "customer_balance": customer.wallet_balance,
   212                                                   "remaining_stock": good.inventory.stock_count
   213                                               }), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: get_purchase_history at line 216

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   216                                           @app.route('/sales/history', methods=['GET'])
   217                                           @jwt_required()
   218                                           @profile_line
   219                                           @profile
   220                                           def get_purchase_history():
   221                                               """
   222                                               Retrieves purchase history for the authenticated customer.
   223                                           
   224                                               Returns:
   225                                                   Response: JSON response with a list of purchase history.
   226                                               """
   227                                               current_user_id = get_jwt_identity()
   228                                               customer = Customer.query.get(current_user_id)
   229                                               if not customer:
   230                                                   return jsonify({"error": "Customer not found"}), 404
   231                                           
   232                                               sales = Sale.query.filter_by(customer_id=customer.id).all()
   233                                               return jsonify([
   234                                                   {
   235                                                       "good_name": sale.good.name,
   236                                                       "quantity": sale.quantity,
   237                                                       "total_price": sale.total_price,
   238                                                       "timestamp": sale.timestamp
   239                                                   }
   240                                                   for sale in sales
   241                                               ]), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: get_all_purchase_histories at line 244

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   244                                           @app.route('/sales/history/all', methods=['GET'])
   245                                           @jwt_required()
   246                                           @profile_line
   247                                           @profile
   248                                           def get_all_purchase_histories():
   249                                               """
   250                                               Retrieves all purchase histories.
   251                                           
   252                                               Admin-only endpoint.
   253                                           
   254                                               Returns:
   255                                                   Response: JSON response with a list of all sales, including customer, product, and purchase details.
   256                                               """
   257                                               claims = get_jwt()
   258                                               if not claims.get('is_admin', False):
   259                                                   return jsonify({"error": "Unauthorized action"}), 403
   260                                           
   261                                               sales = Sale.query.all()
   262                                               return jsonify([
   263                                                   {
   264                                                       "customer_id": sale.customer_id,
   265                                                       "good_name": sale.good.name,
   266                                                       "quantity": sale.quantity,
   267                                                       "total_price": sale.total_price,
   268                                                       "timestamp": sale.timestamp
   269                                                   }
   270                                                   for sale in sales
   271                                               ]), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: add_to_wishlist at line 274

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   274                                           @app.route('/wishlist', methods=['POST'])
   275                                           @jwt_required()
   276                                           @profile_line
   277                                           @profile
   278                                           def add_to_wishlist():
   279                                               """
   280                                               Adds an item to the customer's wishlist.
   281                                           
   282                                               Args:
   283                                                   None (data is provided in the request body).
   284                                           
   285                                               Returns:
   286                                                   Response: JSON response confirming addition or an error message if the item already exists.
   287                                               """
   288                                               current_user_id = get_jwt_identity()
   289                                               data = request.get_json()
   290                                           
   291                                               good_id = data.get('good_id')
   292                                           
   293                                               good = Good.query.get(good_id)
   294                                               if not good:
   295                                                   return jsonify({"error": "Good not found"}), 404
   296                                           
   297                                               if Wishlist.query.filter_by(customer_id=current_user_id, good_id=good_id).first():
   298                                                   return jsonify({"message": "Item already in wishlist"}), 400
   299                                           
   300                                               new_wishlist_item = Wishlist(customer_id=current_user_id, good_id=good_id)
   301                                               db.session.add(new_wishlist_item)
   302                                               db.session.commit()
   303                                               return jsonify({"message": "Item added to wishlist successfully"}), 201

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: remove_from_wishlist at line 306

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   306                                           @app.route('/wishlist/<int:wishlist_id>', methods=['DELETE'])
   307                                           @jwt_required()
   308                                           @profile_line
   309                                           @profile
   310                                           def remove_from_wishlist(wishlist_id):
   311                                               """
   312                                               Removes an item from the customer's wishlist.
   313                                           
   314                                               Args:
   315                                                   wishlist_id (int): ID of the wishlist item to remove.
   316                                           
   317                                               Returns:
   318                                                   Response: JSON response confirming removal or an error message if the item is not found.
   319                                               """
   320                                               current_user_id = get_jwt_identity()
   321                                           
   322                                               wishlist_item = Wishlist.query.filter_by(id=wishlist_id, customer_id=current_user_id).first()
   323                                           
   324                                               if not wishlist_item:
   325                                                   return jsonify({"error": "Item not found in wishlist"}), 404
   326                                           
   327                                               db.session.delete(wishlist_item)
   328                                               db.session.commit()
   329                                               return jsonify({"message": "Item removed from wishlist"}), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: get_wishlist at line 332

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   332                                           @app.route('/wishlist', methods=['GET'])
   333                                           @jwt_required()
   334                                           @profile_line
   335                                           @profile
   336                                           def get_wishlist():
   337                                               """
   338                                               Retrieves all items in the customer's wishlist.
   339                                           
   340                                               Returns:
   341                                                   Response: JSON response with a list of wishlist items, including product details.
   342                                               """
   343                                               current_user_id = get_jwt_identity()
   344                                           
   345                                               wishlist_items = Wishlist.query.filter_by(customer_id=current_user_id).all()
   346                                               return jsonify([
   347                                                   {
   348                                                       "good_id": item.good_id,
   349                                                       "name": item.good.name,
   350                                                       "category": item.good.category,
   351                                                       "price": item.good.price_per_item,
   352                                                       "description": item.good.description
   353                                                   } for item in wishlist_items
   354                                               ]), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: is_in_wishlist at line 357

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   357                                           @app.route('/wishlist/<int:good_id>', methods=['GET'])
   358                                           @jwt_required()
   359                                           @profile_line
   360                                           @profile
   361                                           def is_in_wishlist(good_id):
   362                                               """
   363                                               Checks if a specific good is in the customer's wishlist.
   364                                           
   365                                               Args:
   366                                                   good_id (int): ID of the good to check.
   367                                           
   368                                               Returns:
   369                                                   Response: JSON response with `in_wishlist: True` if the item exists,
   370                                                   or `in_wishlist: False` if it does not.
   371                                               """
   372                                               current_user_id = get_jwt_identity()
   373                                           
   374                                               wishlist_item = Wishlist.query.filter_by(customer_id=current_user_id, good_id=good_id).first()
   375                                               if wishlist_item:
   376                                                   return jsonify({"in_wishlist": True}), 200
   377                                               else:
   378                                                   return jsonify({"in_wishlist": False}), 404

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: get_recommendations at line 381

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   381                                           @app.route('/sales/recommendations', methods=['GET'])
   382                                           @jwt_required()
   383                                           @profile_line
   384                                           @profile
   385                                           def get_recommendations():
   386                                               """
   387                                               Provides personalized product recommendations for the customer.
   388                                           
   389                                               Returns:
   390                                                   Response: JSON response with a list of recommended goods based on purchase patterns.
   391                                               """
   392                                               current_user_id = get_jwt_identity()
   393                                               recommendations = get_recommendations_for_customer(current_user_id)
   394                                           
   395                                               return jsonify(recommendations), 200

Total time: 0 s
File: C:\Users\User\Desktop\Taline files\AUB\Y4 Fall 24-25\EECE 435L\Project\Project435L_TalineSlim_KarimKobeissi\sales_service\app.py
Function: get_notifications at line 435

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   435                                           @app.route('/notifications', methods=['GET'])
   436                                           @jwt_required()
   437                                           @profile_line
   438                                           @profile
   439                                           def get_notifications():
   440                                               """
   441                                               Retrieves all notifications for the authenticated customer.
   442                                           
   443                                               Returns:
   444                                                   Response: JSON response with a list of notifications, including type, message, and timestamps.
   445                                               """
   446                                               current_user_id = get_jwt_identity()
   447                                           
   448                                               notifications = Notification.query.filter_by(customer_id=current_user_id).order_by(Notification.created_at.desc()).all()
   449                                           
   450                                               for notification in notifications:
   451                                                   if notification.status == 'unread':
   452                                                       notification.status = 'read'
   453                                           
   454                                               db.session.commit()
   455                                           
   456                                               return jsonify([
   457                                                   {
   458                                                       "message": notification.message,
   459                                                       "type": notification.type,
   460                                                       "created_at": notification.created_at,
   461                                                       "status": notification.status,
   462                                                       "good_id": notification.good_id
   463                                                   } for notification in notifications
   464                                               ]), 200

